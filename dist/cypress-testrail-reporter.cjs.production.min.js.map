{"version":3,"file":"cypress-testrail-reporter.cjs.production.min.js","sources":["../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/testrail.interface.ts","../src/testrail.ts","../src/utils.ts","../src/reporter.ts"],"sourcesContent":["// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","export interface TestRailOptions {\n  domain: string;\n  username: string;\n  password: string;\n  projectId: number;\n  planId: number;\n}\n\nexport enum Status {\n  Passed = 1,\n  Blocked = 2,\n  Untested = 3,\n  Retest = 4,\n  Failed = 5,\n}\n\nexport interface TestRailResult {\n  case_id: number;\n  run_id: number;\n  status_id: Status;\n  comment?: String;\n}\n","import axios, { AxiosInstance } from 'axios';\nimport chalk from 'chalk';\nimport { format } from 'date-fns';\nimport { Case, Entry, Plan, Suite } from './api.types';\nimport { Status, TestRailOptions, TestRailResult } from './testrail.interface';\n\ninterface ConstructedTestResult {\n  [runId: number]: Array<Omit<TestRailResult, 'run_id'>>;\n}\n\nclass ReporterSuite {\n  id: number;\n  name: string;\n  description: string;\n  caseIds: number[];\n  runId: number | null;\n\n  constructor(id: number, name: string, description: string) {\n    this.id = id;\n    this.name = name;\n    this.description = description;\n    this.caseIds = [];\n    this.runId = null;\n  }\n}\n\nexport class TestRail {\n  private axiosInstance: AxiosInstance;\n  private readonly projectId: number;\n  private readonly planId: number;\n  private readonly today: string;\n  private suites: ReporterSuite[] = [];\n  private testResults: TestRailResult[] = [];\n\n  constructor(private options: TestRailOptions) {\n    this.axiosInstance = axios.create({\n      baseURL: `https://${options.domain}/index.php?/api/v2`,\n      headers: { 'Content-Type': 'application/json' },\n      auth: {\n        username: options.username,\n        password: options.password,\n      },\n    });\n\n    this.projectId = options.projectId;\n    this.planId = options.planId;\n    this.today = format(new Date().getTime(), 'yyyy/MM/dd');\n  }\n\n  public get results(): TestRailResult[] {\n    return this.testResults;\n  }\n\n  public addFailedTest(caseId: number, test: Mocha.Test) {\n    const runId = this.findRunIdForCase(caseId);\n    if (runId) {\n      this.testResults.push({\n        case_id: caseId,\n        status_id: Status.Failed,\n        run_id: runId,\n        comment: (test.err as Error).message,\n      });\n    }\n  }\n\n  public addPassedTest(caseId: number, test: Mocha.Test) {\n    const runId = this.findRunIdForCase(caseId);\n    if (runId) {\n      this.testResults.push({\n        case_id: caseId,\n        status_id: Status.Passed,\n        run_id: runId,\n        comment: `Execution time: ${test.duration}ms`,\n      });\n    }\n  }\n\n  public async constructSuites(): Promise<void> {\n    try {\n      const suiteResponse = await this.axiosInstance.get<Suite[]>(`/get_suites/${this.projectId}`);\n      const suites = suiteResponse.data\n        .filter(s => !s.name.includes('Master'))\n        .sort((a, b) => {\n          if (a.name > b.name) return 1;\n          if (a.name < b.name) return -1;\n          return 0;\n        });\n\n      for (const s of suites) {\n        this.suites.push(new ReporterSuite(s.id, s.name, s.description));\n      }\n\n      const planResponse = await this.axiosInstance.get<Plan>(`/get_plan/${this.planId}`);\n      const plan = planResponse.data;\n\n      let runs: Plan[] = [];\n      if (plan.entries && plan.entries.length) {\n        runs = TestRail.flat(plan.entries.map(e => e.runs));\n      } else {\n        runs = await this.createRuns();\n      }\n\n      for (const r of runs) {\n        this.suites.forEach(s => {\n          if (s.id === r.suite_id) {\n            s.runId = r.id;\n          }\n        });\n      }\n      await this.getCases();\n    } catch (e) {\n      console.log(chalk.redBright.underline.bold('Internal error', e));\n    }\n  }\n\n  public async publish() {\n    const constructedResults = this.constructTestResult();\n    const addResultPromises = Object.entries(constructedResults).map(([runId, results]) => {\n      return this.axiosInstance.post(`/add_results_for_cases/${runId}`, { results });\n    });\n\n    await Promise.all(addResultPromises);\n    console.log('\\n', chalk.magenta.underline.bold('(TestRail Reporter)'));\n    console.log(\n      '\\n',\n      ` - Results are published to ${chalk.magenta(\n        `https://${this.options.domain}/index.php?/runs/plan/${this.planId}`,\n      )}`,\n      '\\n',\n    );\n  }\n\n  private constructTestResult(): ConstructedTestResult {\n    return this.testResults.reduce((acc: ConstructedTestResult, cur: TestRailResult) => {\n      const { run_id, ...result } = cur;\n      acc[run_id] = acc[run_id] ? [...acc[run_id], result] : [result];\n      return acc;\n    }, {});\n  }\n\n  private findRunIdForCase(caseId: number): number {\n    const suite = this.suites.find(s => s.caseIds.includes(caseId));\n    return suite ? (suite.runId as number) : 0;\n  }\n\n  private async createRuns() {\n    let runs: Plan[] = [];\n    for (let i = 0; i < this.suites.length; i++) {\n      const suite = this.suites[i];\n      const run = await this.axiosInstance\n        .post<Entry>(`/add_plan_entry/${this.planId}`, {\n          suite_id: suite.id,\n          name: suite.name,\n          description: suite.description + ' ' + this.today,\n        })\n        .then(res => res.data.runs[0]);\n      runs.push(run);\n    }\n\n    return runs;\n  }\n\n  private async getCases() {\n    const getCasesPromises = this.suites.map(s => {\n      return this.axiosInstance.get<Case[]>(`/get_cases/${this.projectId}&suite_id=${s.id}`);\n    });\n\n    const casesResponse = await Promise.all(getCasesPromises);\n    const cases = TestRail.flat(casesResponse.map(cr => cr.data));\n\n    for (const c of cases) {\n      this.suites.forEach(s => {\n        if (s.id === c.suite_id) {\n          s.caseIds.push(c.id);\n        }\n      });\n    }\n  }\n\n  private static flat<T>(arr: T[][]): T[] {\n    return arr.reduce((acc, cur) => acc.concat(cur), []);\n  }\n}\n","export const titleToCaseId: (title: string) => number | null = title => {\n  const testCaseIdRegExp: RegExp = /\\bT?C(\\d+)\\b/g;\n  let m: RegExpExecArray | null;\n  let caseId: number | null = null;\n  while ((m = testCaseIdRegExp.exec(title)) !== null) {\n    caseId = parseInt(m[1]);\n  }\n  return caseId;\n};\n","import chalk from 'chalk';\nimport { reporters } from 'mocha';\nimport { TestRail } from './testrail';\nimport { TestRailOptions } from './testrail.interface';\nimport { titleToCaseId } from './utils';\n\nclass CypressTestrailReporter extends reporters.Base {\n  private readonly testRail: TestRail;\n\n  constructor(runner: Mocha.Runner, options: Mocha.MochaOptions) {\n    super(runner, options);\n    const reporterOptions = options.reporterOptions as TestRailOptions;\n    CypressTestrailReporter.validate(reporterOptions);\n    this.testRail = new TestRail(reporterOptions);\n    this.report();\n  }\n\n  private report() {\n    this.runner.once('start', this.testRail.constructSuites.bind(this.testRail));\n    this.runner.on('fail', this.handleTest('fail'));\n    this.runner.on('pass', this.handleTest('pass'));\n    this.runner.on('end', this.handleEnd);\n  }\n\n  private handleTest = (status: 'fail' | 'pass') => (test: Mocha.Test) => {\n    const caseId = titleToCaseId(test.title);\n    if (caseId) {\n      status === 'fail' ? this.testRail.addFailedTest(caseId, test) : this.testRail.addPassedTest(caseId, test);\n    }\n  };\n\n  private handleEnd = () => {\n    if (!this.testRail.results.length) {\n      console.log('\\n', chalk.magenta.underline.bold('(TestRail Reporter)'));\n      console.warn(\n        '\\n',\n        'No testcases were matched. Ensure that your tests are declared correctly and matches Cxxx',\n        '\\n',\n      );\n      return;\n    }\n\n    this.testRail.publish().catch(console.error);\n  };\n\n  private static validate(options: TestRailOptions) {\n    if (options == null) {\n      throw new Error('No reporterOptions');\n    }\n\n    for (const key in options) {\n      if ((options as any)[key]) {\n        continue;\n      }\n\n      throw new Error(`Missing ${key} value. Update repoterOptions`);\n    }\n  }\n}\n\nmodule.exports = CypressTestrailReporter;\n"],"names":["_Pact","prototype","then","onFulfilled","onRejected","result","state","this","s","callback","_settle","v","e","o","_this","value","pact","bind","observer","_isSettledPact","thenable","Status","Symbol","iterator","asyncIterator","ReporterSuite","id","name","description","caseIds","runId","TestRail","options","axiosInstance","axios","create","baseURL","domain","headers","auth","username","password","projectId","planId","today","format","Date","getTime","addFailedTest","caseId","test","findRunIdForCase","testResults","push","case_id","status_id","Failed","run_id","comment","err","message","addPassedTest","Passed","duration","constructSuites","body","recover","_this2","get","suiteResponse","data","filter","includes","sort","a","b","suites","planResponse","r","forEach","suite_id","runs","getCases","plan","entries","length","createRuns","flat","map","console","log","chalk","redBright","underline","bold","publish","constructedResults","_this4","constructTestResult","addResultPromises","Object","post","results","Promise","all","magenta","reduce","acc","cur","suite","find","i","update","stage","shouldContinue","updateValue","reject","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","_this6","res","run","getCasesPromises","_this8","casesResponse","c","cr","arr","concat","titleToCaseId","title","m","testCaseIdRegExp","exec","parseInt","module","exports","runner","status","testRail","warn","error","reporterOptions","CypressTestrailReporter","validate","report","once","on","handleTest","handleEnd","Error","key","reporters","Base"],"mappings":"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"}