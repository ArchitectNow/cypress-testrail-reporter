{"version":3,"file":"cypress-testrail-reporter.cjs.development.js","sources":["../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/testrail.interface.ts","../src/testrail.ts","../src/utils.ts","../src/reporter.ts","../src/index.ts"],"sourcesContent":["// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","export interface TestRailOptions {\n  domain: string;\n  username: string;\n  password: string;\n  projectId: number;\n  planId?: number;\n  runId?: number;\n}\n\nexport enum Status {\n  Passed = 1,\n  Blocked = 2,\n  Untested = 3,\n  Retest = 4,\n  Failed = 5,\n}\n\nexport interface TestRailResult {\n  case_id: number;\n  run_id: number;\n  status_id: Status;\n  elapsed: string | null;\n  comment?: string;\n}\n","import axios, { AxiosInstance } from 'axios';\nimport chalk from 'chalk';\nimport { format } from 'date-fns';\nimport { Case, Entry, Plan, Suite } from './api.types';\nimport { Status, TestRailOptions, TestRailResult } from './testrail.interface';\n\ninterface ConstructedTestResult {\n  [runId: number]: Array<Omit<TestRailResult, 'run_id'>>;\n}\n\nclass ReporterSuite {\n  id: number;\n  name: string;\n  description: string;\n  caseIds: number[];\n  runId: number | null;\n\n  constructor(id: number, name: string, description: string) {\n    this.id = id;\n    this.name = name;\n    this.description = description;\n    this.caseIds = [];\n    this.runId = null;\n  }\n}\n\nexport class TestRail {\n  private axiosInstance: AxiosInstance;\n  private readonly projectId: number;\n  private readonly planId?: number;\n  private readonly runId?: number;\n  private readonly today: string;\n  private suites: ReporterSuite[] = [];\n  private testResults: TestRailResult[] = [];\n\n  constructor(private options: TestRailOptions) {\n    this.axiosInstance = axios.create({\n      baseURL: `https://${options.domain}/index.php?/api/v2`,\n      headers: { 'Content-Type': 'application/json' },\n      auth: {\n        username: options.username,\n        password: options.password,\n      },\n    });\n\n    this.projectId = options.projectId;\n    this.planId = options.planId;\n    this.runId = options.runId;\n    this.today = format(new Date().getTime(), 'yyyy/MM/dd');\n  }\n\n  public get results(): TestRailResult[] {\n    return this.testResults;\n  }\n\n  public addFailedTest(caseId: number, test: Mocha.Test) {\n    const runId = this.runId ? this.runId : this.findRunIdForCase(caseId);\n\n    if (runId) {\n      console.log('- Add Failed Test: ', test.title);\n      const elapsed = this.getElapsedFromTest(test);\n\n      this.testResults.push({\n        case_id: caseId,\n        status_id: Status.Failed,\n        run_id: runId,\n        elapsed,\n        comment: (test.err as Error).message,\n      });\n    } else {\n      console.warn('Could not find a Run ID for failed Test Case: ', caseId);\n    }\n  }\n\n  public addPassedTest(caseId: number, test: Mocha.Test) {\n    const runId = this.runId ? this.runId : this.findRunIdForCase(caseId);\n\n    if (runId) {\n      const elapsed = this.getElapsedFromTest(test);\n\n      this.testResults.push({\n        case_id: caseId,\n        status_id: Status.Passed,\n        run_id: runId,\n        elapsed,\n        comment: `Execution time: ${test.duration}ms`,\n      });\n    } else {\n      console.warn('Could not find a Run ID for passed Test Case: ', caseId);\n    }\n  }\n\n  public async constructSuites(): Promise<void> {\n    try {\n      const suiteResponse = await this.axiosInstance.get<Suite[]>(`/get_suites/${this.projectId}`);\n      const suites = suiteResponse.data\n        .filter(s => !s.name.includes('Master'))\n        .sort((a, b) => {\n          if (a.name > b.name) return 1;\n          if (a.name < b.name) return -1;\n          return 0;\n        });\n\n      for (const s of suites) {\n        this.suites.push(new ReporterSuite(s.id, s.name, s.description));\n      }\n\n      let runs: Plan[] = [];\n      if (this.planId) {\n        const planResponse = await this.axiosInstance.get<Plan>(`/get_plan/${this.planId}`);\n        const plan = planResponse.data;\n        if (plan.entries && plan.entries.length) {\n          runs = TestRail.flat(plan.entries.map(e => e.runs));\n        }\n\n        if (!runs.length) {\n          runs = await this.createRuns();\n        }\n\n        for (const r of runs) {\n          this.suites.forEach(s => {\n            if (s.id === r.suite_id) {\n              s.runId = r.id;\n            }\n          });\n        }\n      }\n\n      await this.getCases();\n    } catch (e) {\n      console.log(chalk.redBright.underline.bold('Internal error', e));\n    }\n  }\n\n  public async publish() {\n    const constructedResults = this.constructTestResult();\n    const addResultPromises = Object.entries(constructedResults).map(([runId, results]) => {\n      return this.axiosInstance.post(`/add_results_for_cases/${runId}`, { results });\n    });\n\n    try {\n      await Promise.all(addResultPromises);\n      console.log('\\n', chalk.magenta.underline.bold('(TestRail Reporter)'));\n\n      let publishedLink;\n\n      if (this.planId) {\n        publishedLink = `https://${this.options.domain}/index.php?/plans/view/${this.planId}`;\n      } else {\n        publishedLink = `https://${this.options.domain}/index.php?/runs/view/${this.runId}`;\n      }\n\n      console.log('\\n', ` - Results are published to ${chalk.magenta(publishedLink)}`, '\\n');\n    } catch (e) {\n      console.error(e);\n    }\n  }\n\n  private getElapsedFromTest(test: Mocha.Test) {\n    if (!test.duration) {\n      return null;\n    }\n\n    return Math.ceil(test.duration / 1000) + 's';\n  }\n\n  private constructTestResult(): ConstructedTestResult {\n    return this.testResults.reduce((acc: ConstructedTestResult, cur: TestRailResult) => {\n      const { run_id, ...result } = cur;\n      acc[run_id] = acc[run_id] ? [...acc[run_id], result] : [result];\n      return acc;\n    }, {});\n  }\n\n  private findRunIdForCase(caseId: number): number {\n    const suite = this.suites.find(s => s.caseIds.includes(caseId));\n    return suite ? (suite.runId as number) : 0;\n  }\n\n  private async createRuns() {\n    let runs: Plan[] = [];\n    for (let i = 0; i < this.suites.length; i++) {\n      const suite = this.suites[i];\n      const run = await this.axiosInstance\n        .post<Entry>(`/add_plan_entry/${this.planId}`, {\n          suite_id: suite.id,\n          name: suite.name,\n          description: suite.description + ' ' + this.today,\n        })\n        .then(res => res.data.runs[0]);\n      runs.push(run);\n    }\n\n    return runs;\n  }\n\n  private async getCases() {\n    const getCasesPromises = this.suites.map(s => {\n      return this.axiosInstance.get<Case[]>(`/get_cases/${this.projectId}&suite_id=${s.id}`);\n    });\n\n    const casesResponse = await Promise.all(getCasesPromises);\n    const cases = TestRail.flat(casesResponse.map(cr => cr.data));\n\n    for (const c of cases) {\n      this.suites.forEach(s => {\n        if (s.id === c.suite_id) {\n          s.caseIds.push(c.id);\n        }\n      });\n    }\n  }\n\n  private static flat<T>(arr: T[][]): T[] {\n    return arr.reduce((acc, cur) => acc.concat(cur), []);\n  }\n}\n","export const titleToCaseId: (title: string) => number | null = title => {\n  const testCaseIdRegExp: RegExp = /\\bT?C(\\d+)\\b/g;\n\n  let m: RegExpExecArray | null;\n  let caseId: number | null = null;\n\n  while ((m = testCaseIdRegExp.exec(title)) !== null) {\n    caseId = parseInt(m[1]);\n  }\n\n  return caseId;\n};\n","import chalk from 'chalk';\nimport { reporters } from 'mocha';\nimport { TestRail } from './testrail';\nimport { TestRailOptions } from './testrail.interface';\nimport { titleToCaseId } from './utils';\n\nexport default class CypressTestrailReporter extends reporters.Base {\n  private readonly testRail: TestRail;\n\n  constructor(runner: Mocha.Runner, options: Mocha.MochaOptions) {\n    super(runner, options);\n    const reporterOptions = options.reporterOptions as TestRailOptions;\n    CypressTestrailReporter.validate(reporterOptions);\n\n    if (!reporterOptions.planId && !reporterOptions.runId) {\n      throw new Error('CypressTestRailReporter requires either `planId` or `runId` to be configured.');\n    }\n    if (!reporterOptions.projectId) {\n      throw new Error('CypressTestRailReporter required `projectId` to be configured.');\n    }\n\n    this.testRail = new TestRail(reporterOptions);\n    this.report();\n  }\n\n  private report() {\n    this.runner.once('start', this.testRail.constructSuites.bind(this.testRail));\n    this.runner.on('fail', this.handleTest('fail'));\n    this.runner.on('pass', this.handleTest('pass'));\n    this.runner.on('end', this.handleEnd);\n  }\n\n  private handleTest = (status: 'fail' | 'pass') => (test: Mocha.Test) => {\n    const caseId = titleToCaseId(test.title);\n\n    if (caseId) {\n      status === 'fail' ? this.testRail.addFailedTest(caseId, test) : this.testRail.addPassedTest(caseId, test);\n    }\n  };\n\n  private handleEnd = () => {\n    if (!this.testRail.results.length) {\n      console.log('\\n', chalk.magenta.underline.bold('(TestRail Reporter)'));\n      console.warn(\n        '\\n',\n        'No test cases were matched. Ensure that your tests are declared correctly and matches CXXXX',\n        '\\n',\n      );\n      return;\n    }\n\n    this.testRail.publish();\n  };\n\n  private static validate(options: TestRailOptions) {\n    if (options == null) {\n      throw new Error('No reporterOptions');\n    }\n\n    for (const key in options) {\n      if ((options as any)[key]) {\n        continue;\n      }\n\n      throw new Error(`Unknown ${key} value, please update your reporterOptions.`);\n    }\n  }\n}\n","import CypressTestrailReporter from './reporter';\n\nmodule.exports = CypressTestrailReporter;\n"],"names":["Status","ReporterSuite","id","name","description","caseIds","runId","TestRail","options","axiosInstance","axios","create","baseURL","domain","headers","auth","username","password","projectId","planId","today","format","Date","getTime","addFailedTest","caseId","test","findRunIdForCase","console","log","title","elapsed","getElapsedFromTest","testResults","push","case_id","status_id","Failed","run_id","comment","err","message","warn","addPassedTest","Passed","duration","constructSuites","get","suiteResponse","getCases","suites","data","filter","s","includes","sort","a","b","runs","planResponse","r","forEach","suite_id","plan","entries","length","flat","map","e","createRuns","chalk","redBright","underline","bold","publish","constructedResults","constructTestResult","addResultPromises","Object","results","post","Promise","all","magenta","publishedLink","error","Math","ceil","reduce","acc","cur","result","suite","find","i","then","res","run","getCasesPromises","casesResponse","cases","cr","c","arr","concat","titleToCaseId","testCaseIdRegExp","m","exec","parseInt","CypressTestrailReporter","runner","status","testRail","reporterOptions","validate","Error","report","once","bind","on","handleTest","handleEnd","key","reporters","Base","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA,AAAO,MAAM,KAAK,gBAAgB,CAAC,WAAW;CAC7C,SAAS,KAAK,GAAG,EAAE;CACnB,KAAK,CAAC,SAAS,CAAC,IAAI,GAAG,SAAS,WAAW,EAAE,UAAU,EAAE;EACxD,MAAM,MAAM,GAAG,IAAI,KAAK,EAAE,CAAC;EAC3B,MAAM,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC;EACrB,IAAI,KAAK,EAAE;GACV,MAAM,QAAQ,GAAG,KAAK,GAAG,CAAC,GAAG,WAAW,GAAG,UAAU,CAAC;GACtD,IAAI,QAAQ,EAAE;IACb,IAAI;KACH,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;KACrC,CAAC,OAAO,CAAC,EAAE;KACX,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;KACtB;IACD,OAAO,MAAM,CAAC;IACd,MAAM;IACN,OAAO,IAAI,CAAC;IACZ;GACD;EACD,IAAI,CAAC,CAAC,GAAG,SAAS,KAAK,EAAE;GACxB,IAAI;IACH,MAAM,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC;IACtB,IAAI,KAAK,CAAC,CAAC,GAAG,CAAC,EAAE;KAChB,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,WAAW,GAAG,WAAW,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,CAAC;KAC7D,MAAM,IAAI,UAAU,EAAE;KACtB,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;KACtC,MAAM;KACN,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;KAC1B;IACD,CAAC,OAAO,CAAC,EAAE;IACX,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACtB;GACD,CAAC;EACF,OAAO,MAAM,CAAC;GACd;CACD,OAAO,KAAK,CAAC;CACb,GAAG,CAAC;;;AAGL,AAAO,SAAS,OAAO,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE;CAC3C,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE;EACZ,IAAI,KAAK,YAAY,KAAK,EAAE;GAC3B,IAAI,KAAK,CAAC,CAAC,EAAE;IACZ,IAAI,KAAK,GAAG,CAAC,EAAE;KACd,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC;KAChB;IACD,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC;IAChB,MAAM;IACN,KAAK,CAAC,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;IAC1C,OAAO;IACP;GACD;EACD,IAAI,KAAK,IAAI,KAAK,CAAC,IAAI,EAAE;GACxB,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,EAAE,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;GACzE,OAAO;GACP;EACD,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC;EACf,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC;EACf,MAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC;EACxB,IAAI,QAAQ,EAAE;GACb,QAAQ,CAAC,IAAI,CAAC,CAAC;GACf;EACD;CACD;;AAED,AAAO,SAAS,cAAc,CAAC,QAAQ,EAAE;CACxC,OAAO,QAAQ,YAAY,KAAK,IAAI,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;CACnD;AACD,AA+FA;AACA,AAAO,MAAM,eAAe,iBAAiB,OAAO,MAAM,KAAK,WAAW,IAAI,MAAM,CAAC,QAAQ,KAAK,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,iBAAiB,CAAC,CAAC,IAAI,YAAY,CAAC;AAC/J,AA2DA;AACA,AAAO,MAAM,oBAAoB,iBAAiB,OAAO,MAAM,KAAK,WAAW,IAAI,MAAM,CAAC,aAAa,KAAK,MAAM,CAAC,aAAa,GAAG,MAAM,CAAC,sBAAsB,CAAC,CAAC,IAAI,iBAAiB,CAAC;AACxL,AA2BA;;AAEA,AAAO,SAAS,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE;CACxC,IAAI,KAAK,CAAC;CACV,SAAS;EACR,IAAI,cAAc,GAAG,IAAI,EAAE,CAAC;EAC5B,IAAI,cAAc,CAAC,cAAc,CAAC,EAAE;GACnC,cAAc,GAAG,cAAc,CAAC,CAAC,CAAC;GAClC;EACD,IAAI,CAAC,cAAc,EAAE;GACpB,OAAO,MAAM,CAAC;GACd;EACD,IAAI,cAAc,CAAC,IAAI,EAAE;GACxB,KAAK,GAAG,CAAC,CAAC;GACV,MAAM;GACN;EACD,IAAI,MAAM,GAAG,IAAI,EAAE,CAAC;EACpB,IAAI,MAAM,IAAI,MAAM,CAAC,IAAI,EAAE;GAC1B,IAAI,cAAc,CAAC,MAAM,CAAC,EAAE;IAC3B,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC;IAClB,MAAM;IACN,KAAK,GAAG,CAAC,CAAC;IACV,MAAM;IACN;GACD;EACD,IAAI,MAAM,EAAE;GACX,IAAI,WAAW,GAAG,MAAM,EAAE,CAAC;GAC3B,IAAI,WAAW,IAAI,WAAW,CAAC,IAAI,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,EAAE;IACpE,KAAK,GAAG,CAAC,CAAC;IACV,MAAM;IACN;GACD;EACD;CACD,IAAI,IAAI,GAAG,IAAI,KAAK,EAAE,CAAC;CACvB,IAAI,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;CACzC,CAAC,KAAK,KAAK,CAAC,GAAG,cAAc,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,KAAK,KAAK,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,WAAW,CAAC,IAAI,CAAC,kBAAkB,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE,MAAM,CAAC,CAAC;CAChK,OAAO,IAAI,CAAC;CACZ,SAAS,gBAAgB,CAAC,KAAK,EAAE;EAChC,MAAM,GAAG,KAAK,CAAC;EACf,GAAG;GACF,IAAI,MAAM,EAAE;IACX,WAAW,GAAG,MAAM,EAAE,CAAC;IACvB,IAAI,WAAW,IAAI,WAAW,CAAC,IAAI,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,EAAE;KACpE,WAAW,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,MAAM,CAAC,CAAC;KAC1D,OAAO;KACP;IACD;GACD,cAAc,GAAG,IAAI,EAAE,CAAC;GACxB,IAAI,CAAC,cAAc,KAAK,cAAc,CAAC,cAAc,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE;IAC7E,OAAO,CAAC,IAAI,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;IACzB,OAAO;IACP;GACD,IAAI,cAAc,CAAC,IAAI,EAAE;IACxB,cAAc,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,MAAM,CAAC,CAAC;IAC3D,OAAO;IACP;GACD,MAAM,GAAG,IAAI,EAAE,CAAC;GAChB,IAAI,cAAc,CAAC,MAAM,CAAC,EAAE;IAC3B,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC;IAClB;GACD,QAAQ,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE;EAClC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,MAAM,CAAC,CAAC;EACnD;CACD,SAAS,gBAAgB,CAAC,cAAc,EAAE;EACzC,IAAI,cAAc,EAAE;GACnB,MAAM,GAAG,IAAI,EAAE,CAAC;GAChB,IAAI,MAAM,IAAI,MAAM,CAAC,IAAI,EAAE;IAC1B,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,MAAM,CAAC,CAAC;IACnD,MAAM;IACN,gBAAgB,CAAC,MAAM,CAAC,CAAC;IACzB;GACD,MAAM;GACN,OAAO,CAAC,IAAI,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;GACzB;EACD;CACD,SAAS,kBAAkB,GAAG;EAC7B,IAAI,cAAc,GAAG,IAAI,EAAE,EAAE;GAC5B,IAAI,cAAc,CAAC,IAAI,EAAE;IACxB,cAAc,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,MAAM,CAAC,CAAC;IAC3D,MAAM;IACN,gBAAgB,CAAC,cAAc,CAAC,CAAC;IACjC;GACD,MAAM;GACN,OAAO,CAAC,IAAI,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;GACzB;EACD;CACD;AACD,AA4NA;;AAEA,AAAO,SAAS,MAAM,CAAC,IAAI,EAAE,OAAO,EAAE;CACrC,IAAI;EACH,IAAI,MAAM,GAAG,IAAI,EAAE,CAAC;EACpB,CAAC,MAAM,CAAC,EAAE;EACV,OAAO,OAAO,CAAC,CAAC,CAAC,CAAC;EAClB;CACD,IAAI,MAAM,IAAI,MAAM,CAAC,IAAI,EAAE;EAC1B,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,OAAO,CAAC,CAAC;EACpC;CACD,OAAO,MAAM,CAAC;CACd;;ACnjBD,IAAYA,MAAZ;;AAAA,WAAYA;EACVA,4BAAA,WAAA;EACAA,6BAAA,YAAA;EACAA,8BAAA,aAAA;EACAA,4BAAA,WAAA;EACAA,4BAAA,WAAA;CALF,EAAYA,MAAM,KAANA,MAAM,KAAA,CAAlB;;ICCMC,gBAOJ,uBAAYC,EAAZ,EAAwBC,IAAxB,EAAsCC,WAAtC;OACOF,EAAL,GAAUA,EAAV;OACKC,IAAL,GAAYA,IAAZ;OACKC,WAAL,GAAmBA,WAAnB;OACKC,OAAL,GAAe,EAAf;OACKC,KAAL,GAAa,IAAb;;;AAIJ,IAAaC,QAAb;;AAAA;oBASsBC,OAApB;gBAAoB,GAAAA,OAAA;eAHZ,GAA0B,EAA1B;oBACA,GAAgC,EAAhC;SAGDC,aAAL,GAAqBC,KAAK,CAACC,MAAN,CAAa;MAChCC,OAAO,eAAaJ,OAAO,CAACK,MAArB,uBADyB;MAEhCC,OAAO,EAAE;wBAAkB;OAFK;MAGhCC,IAAI,EAAE;QACJC,QAAQ,EAAER,OAAO,CAACQ,QADd;QAEJC,QAAQ,EAAET,OAAO,CAACS;;KALD,CAArB;SASKC,SAAL,GAAiBV,OAAO,CAACU,SAAzB;SACKC,MAAL,GAAcX,OAAO,CAACW,MAAtB;SACKb,KAAL,GAAaE,OAAO,CAACF,KAArB;SACKc,KAAL,GAAaC,cAAM,CAAC,IAAIC,IAAJ,GAAWC,OAAX,EAAD,EAAuB,YAAvB,CAAnB;;;;;SAOKC,aA7BT,GA6BS,uBAAcC,MAAd,EAA8BC,IAA9B;QACCpB,KAAK,GAAG,KAAKA,KAAL,GAAa,KAAKA,KAAlB,GAA0B,KAAKqB,gBAAL,CAAsBF,MAAtB,CAAxC;;QAEInB,KAAJ,EAAW;MACTsB,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCH,IAAI,CAACI,KAAxC;UACMC,OAAO,GAAG,KAAKC,kBAAL,CAAwBN,IAAxB,CAAhB;WAEKO,WAAL,CAAiBC,IAAjB,CAAsB;QACpBC,OAAO,EAAEV,MADW;QAEpBW,SAAS,EAAEpC,MAAM,CAACqC,MAFE;QAGpBC,MAAM,EAAEhC,KAHY;QAIpByB,OAAO,EAAPA,OAJoB;QAKpBQ,OAAO,EAAGb,IAAI,CAACc,GAAL,CAAmBC;OAL/B;KAJF,MAWO;MACLb,OAAO,CAACc,IAAR,CAAa,gDAAb,EAA+DjB,MAA/D;;GA5CN;;SAgDSkB,aAhDT,GAgDS,uBAAclB,MAAd,EAA8BC,IAA9B;QACCpB,KAAK,GAAG,KAAKA,KAAL,GAAa,KAAKA,KAAlB,GAA0B,KAAKqB,gBAAL,CAAsBF,MAAtB,CAAxC;;QAEInB,KAAJ,EAAW;UACHyB,OAAO,GAAG,KAAKC,kBAAL,CAAwBN,IAAxB,CAAhB;WAEKO,WAAL,CAAiBC,IAAjB,CAAsB;QACpBC,OAAO,EAAEV,MADW;QAEpBW,SAAS,EAAEpC,MAAM,CAAC4C,MAFE;QAGpBN,MAAM,EAAEhC,KAHY;QAIpByB,OAAO,EAAPA,OAJoB;QAKpBQ,OAAO,uBAAqBb,IAAI,CAACmB,QAA1B;OALT;KAHF,MAUO;MACLjB,OAAO,CAACc,IAAR,CAAa,gDAAb,EAA+DjB,MAA/D;;GA9DN;;SAkEeqB,eAlEf;;mBAoEkC;;sCAD1B;+BAC0B,OAAKrC,aAAL,CAAmBsC,GAAnB,kBAA+C,OAAK7B,SAApD,CAD1B,iBACI8B,aADJ;;mCAmCI,OAAKC,QAAL,EAnCJ;;;cAEIC,MAAM,GAAGF,aAAa,CAACG,IAAd,CACZC,MADY,CACL,UAAAC,CAAC;mBAAI,CAACA,CAAC,CAAClD,IAAF,CAAOmD,QAAP,CAAgB,QAAhB,CAAL;WADI,EAEZC,IAFY,CAEP,UAACC,CAAD,EAAIC,CAAJ;gBACAD,CAAC,CAACrD,IAAF,GAASsD,CAAC,CAACtD,IAAf,EAAqB,OAAO,CAAP;gBACjBqD,CAAC,CAACrD,IAAF,GAASsD,CAAC,CAACtD,IAAf,EAAqB,OAAO,CAAC,CAAR;mBACd,CAAP;WALW,CAAf;;+BAQgB+C,MAAhB,kHAAwB;;;;;;;;;;;;gBAAbG,CAAa;;mBACjBH,MAAL,CAAYhB,IAAZ,CAAiB,IAAIjC,aAAJ,CAAkBoD,CAAC,CAACnD,EAApB,EAAwBmD,CAAC,CAAClD,IAA1B,EAAgCkD,CAAC,CAACjD,WAAlC,CAAjB;;;cAGEsD,IAAI,GAAW,EAAnB;;;gBACI,OAAKvC,MAfP;qCAgB2B,OAAKV,aAAL,CAAmBsC,GAAnB,gBAA0C,OAAK5B,MAA/C,CAhB3B,iBAgBMwC,YAhBN;;;;;;;;;;;;wBA0BWC,CA1BX;;2BA2BOV,MAAL,CAAYW,OAAZ,CAAoB,UAAAR,CAAC;0BACfA,CAAC,CAACnD,EAAF,KAAS0D,CAAC,CAACE,QAAf,EAAyB;wBACvBT,CAAC,CAAC/C,KAAF,GAAUsD,CAAC,CAAC1D,EAAZ;;qBAFJ;;;wCADcwD,IAAhB,yHAAsB;;;;;;;;;oBAThBK,IAAI,GAAGJ,YAAY,CAACR,IAA1B;;oBACIY,IAAI,CAACC,OAAL,IAAgBD,IAAI,CAACC,OAAL,CAAaC,MAAjC,EAAyC;kBACvCP,IAAI,GAAGnD,QAAQ,CAAC2D,IAAT,CAAcH,IAAI,CAACC,OAAL,CAAaG,GAAb,CAAiB,UAAAC,CAAC;2BAAIA,CAAC,CAACV,IAAN;mBAAlB,CAAd,CAAP;;;;sBAGE,CAACA,IAAI,CAACO,MAtBV;2CAuBe,OAAKI,UAAL,EAvBf;sBAuBEX,IAAI,mBAAJ;;;;;;;;;;;;mBAaGU,GAAG;QACVxC,OAAO,CAACC,GAAR,CAAYyC,KAAK,CAACC,SAAN,CAAgBC,SAAhB,CAA0BC,IAA1B,CAA+B,gBAA/B,EAAiDL,CAAjD,CAAZ;;;;KAxGN;;;;;SA4GeM,OA5Gf;;mBA6G+B;;UAArBC,kBAAkB,GAAG,OAAKC,mBAAL,EAA3B;;UACMC,iBAAiB,GAAGC,MAAM,CAACd,OAAP,CAAeW,kBAAf,EAAmCR,GAAnC,CAAuC;YAAE7D;YAAOyE;eACjE,OAAKtE,aAAL,CAAmBuE,IAAnB,6BAAkD1E,KAAlD,EAA2D;UAAEyE,OAAO,EAAPA;SAA7D,CAAP;OADwB,CAA1B;;sCAII;+BACIE,OAAO,CAACC,GAAR,CAAYL,iBAAZ,CADJ;UAEFjD,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkByC,KAAK,CAACa,OAAN,CAAcX,SAAd,CAAwBC,IAAxB,CAA6B,qBAA7B,CAAlB;cAEIW,aAAJ;;cAEI,OAAKjE,MAAT,EAAiB;YACfiE,aAAa,gBAAc,OAAK5E,OAAL,CAAaK,MAA3B,+BAA2D,OAAKM,MAA7E;WADF,MAEO;YACLiE,aAAa,gBAAc,OAAK5E,OAAL,CAAaK,MAA3B,8BAA0D,OAAKP,KAA5E;;;UAGFsB,OAAO,CAACC,GAAR,CAAY,IAAZ,mCAAiDyC,KAAK,CAACa,OAAN,CAAcC,aAAd,CAAjD,EAAiF,IAAjF;;mBACOhB,GAAG;QACVxC,OAAO,CAACyD,KAAR,CAAcjB,CAAd;;;;KAhIN;;;;;SAoIUpC,kBApIV,GAoIU,4BAAmBN,IAAnB;QACF,CAACA,IAAI,CAACmB,QAAV,EAAoB;aACX,IAAP;;;WAGKyC,IAAI,CAACC,IAAL,CAAU7D,IAAI,CAACmB,QAAL,GAAgB,IAA1B,IAAkC,GAAzC;GAzIJ;;SA4IU+B,mBA5IV,GA4IU;WACC,KAAK3C,WAAL,CAAiBuD,MAAjB,CAAwB,UAACC,GAAD,EAA6BC,GAA7B;UACrBpD,SAAsBoD,IAAtBpD;UAAWqD,uCAAWD;;MAC9BD,GAAG,CAACnD,MAAD,CAAH,GAAcmD,GAAG,CAACnD,MAAD,CAAH,aAAkBmD,GAAG,CAACnD,MAAD,CAArB,GAA+BqD,MAA/B,KAAyC,CAACA,MAAD,CAAvD;aACOF,GAAP;KAHK,EAIJ,EAJI,CAAP;GA7IJ;;SAoJU9D,gBApJV,GAoJU,0BAAiBF,MAAjB;QACAmE,KAAK,GAAG,KAAK1C,MAAL,CAAY2C,IAAZ,CAAiB,UAAAxC,CAAC;aAAIA,CAAC,CAAChD,OAAF,CAAUiD,QAAV,CAAmB7B,MAAnB,CAAJ;KAAlB,CAAd;WACOmE,KAAK,GAAIA,KAAK,CAACtF,KAAV,GAA6B,CAAzC;GAtJJ;;SAyJgB+D,UAzJhB;;mBA2JwB;;UADhBX,IAAI,GAAW,EAAnB;UACSoC,GAAC,GAAG,CAAR;;;eAAWA,GAAC,GAAG,OAAK5C,MAAL,CAAYe;;eAAQ6B,GAAC;qBAAI;YACrCF,KAAK,GAAG,OAAK1C,MAAL,CAAY4C,GAAZ,CAAd;+BACkB,OAAKrF,aAAL,CACfuE,IADe,sBACgB,OAAK7D,MADrB,EAC+B;UAC7C2C,QAAQ,EAAE8B,KAAK,CAAC1F,EAD6B;UAE7CC,IAAI,EAAEyF,KAAK,CAACzF,IAFiC;UAG7CC,WAAW,EAAEwF,KAAK,CAACxF,WAAN,GAAoB,GAApB,GAA0B,OAAKgB;SAJ9B,EAMf2E,IANe,CAMV,UAAAC,GAAG;iBAAIA,GAAG,CAAC7C,IAAJ,CAASO,IAAT,CAAc,CAAd,CAAJ;SANO,CAFyB,iBAErCuC,GAFqC;UAS3CvC,IAAI,CAACxB,IAAL,CAAU+D,GAAV;;;;;eAGKvC,IAAP;WAAOA;KAvKX;;;;;SA0KgBT,QA1KhB;;mBA2K6B;;UAAnBiD,gBAAgB,GAAG,OAAKhD,MAAL,CAAYiB,GAAZ,CAAgB,UAAAd,CAAC;eACjC,OAAK5C,aAAL,CAAmBsC,GAAnB,iBAA6C,OAAK7B,SAAlD,kBAAwEmC,CAAC,CAACnD,EAA1E,CAAP;OADuB,CAAzB;;6BAI4B+E,OAAO,CAACC,GAAR,CAAYgB,gBAAZ,kBAAtBC;YACAC,KAAK,GAAG7F,QAAQ,CAAC2D,IAAT,CAAciC,aAAa,CAAChC,GAAd,CAAkB,UAAAkC,EAAE;iBAAIA,EAAE,CAAClD,IAAP;SAApB,CAAd,CAAd;;;;;;;;;;;;cAEWmD;;iBACJpD,MAAL,CAAYW,OAAZ,CAAoB,UAAAR,CAAC;gBACfA,CAAC,CAACnD,EAAF,KAASoG,CAAC,CAACxC,QAAf,EAAyB;cACvBT,CAAC,CAAChD,OAAF,CAAU6B,IAAV,CAAeoE,CAAC,CAACpG,EAAjB;;WAFJ;;;8BADckG,KAAhB,yHAAuB;;;;;;;;KAlL3B;;;;;WA2LiBlC,IA3LjB,GA2LU,cAAeqC,GAAf;WACCA,GAAG,CAACf,MAAJ,CAAW,UAACC,GAAD,EAAMC,GAAN;aAAcD,GAAG,CAACe,MAAJ,CAAWd,GAAX,CAAd;KAAX,EAA0C,EAA1C,CAAP;GA5LJ;;;;;aA0BW,KAAKzD,WAAZ;;;;;;;ACpDG,IAAMwE,aAAa,GAAqC,SAAlDA,aAAkD,CAAA3E,KAAK;MAC5D4E,gBAAgB,GAAW,eAAjC;MAEIC,CAAJ;MACIlF,MAAM,GAAkB,IAA5B;;SAEO,CAACkF,CAAC,GAAGD,gBAAgB,CAACE,IAAjB,CAAsB9E,KAAtB,CAAL,MAAuC,IAA9C,EAAoD;IAClDL,MAAM,GAAGoF,QAAQ,CAACF,CAAC,CAAC,CAAD,CAAF,CAAjB;;;SAGKlF,MAAP;CAVK;;ICMcqF;;;;;mCAGPC,MAAZ,EAAkCvG,OAAlC;;;uCACQuG,MAAN,EAAcvG,OAAd;;oBAsBM,GAAa,UAACwG,MAAD;aAA6B,UAACtF,IAAD;YAC1CD,MAAM,GAAGgF,aAAa,CAAC/E,IAAI,CAACI,KAAN,CAA5B;;YAEIL,MAAJ,EAAY;UACVuF,MAAM,KAAK,MAAX,GAAoB,MAAKC,QAAL,CAAczF,aAAd,CAA4BC,MAA5B,EAAoCC,IAApC,CAApB,GAAgE,MAAKuF,QAAL,CAActE,aAAd,CAA4BlB,MAA5B,EAAoCC,IAApC,CAAhE;;OAJiB;KAAb;;mBAQA,GAAY;UACd,CAAC,MAAKuF,QAAL,CAAclC,OAAd,CAAsBd,MAA3B,EAAmC;QACjCrC,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkByC,KAAK,CAACa,OAAN,CAAcX,SAAd,CAAwBC,IAAxB,CAA6B,qBAA7B,CAAlB;QACA7C,OAAO,CAACc,IAAR,CACE,IADF,EAEE,6FAFF,EAGE,IAHF;;;;YAQGuE,QAAL,CAAcvC,OAAd;KAXM;;QA7BAwC,eAAe,GAAG1G,OAAO,CAAC0G,eAAhC;IACAJ,uBAAuB,CAACK,QAAxB,CAAiCD,eAAjC;;QAEI,CAACA,eAAe,CAAC/F,MAAjB,IAA2B,CAAC+F,eAAe,CAAC5G,KAAhD,EAAuD;YAC/C,IAAI8G,KAAJ,CAAU,+EAAV,CAAN;;;QAEE,CAACF,eAAe,CAAChG,SAArB,EAAgC;YACxB,IAAIkG,KAAJ,CAAU,gEAAV,CAAN;;;UAGGH,QAAL,GAAgB,IAAI1G,QAAJ,CAAa2G,eAAb,CAAhB;;UACKG,MAAL;;;;;;;SAGMA,SAAA;SACDN,MAAL,CAAYO,IAAZ,CAAiB,OAAjB,EAA0B,KAAKL,QAAL,CAAcnE,eAAd,CAA8ByE,IAA9B,CAAmC,KAAKN,QAAxC,CAA1B;SACKF,MAAL,CAAYS,EAAZ,CAAe,MAAf,EAAuB,KAAKC,UAAL,CAAgB,MAAhB,CAAvB;SACKV,MAAL,CAAYS,EAAZ,CAAe,MAAf,EAAuB,KAAKC,UAAL,CAAgB,MAAhB,CAAvB;SACKV,MAAL,CAAYS,EAAZ,CAAe,KAAf,EAAsB,KAAKE,SAA3B;;;0BAyBaP,WAAP,kBAAgB3G,OAAhB;QACFA,OAAO,IAAI,IAAf,EAAqB;YACb,IAAI4G,KAAJ,CAAU,oBAAV,CAAN;;;SAGG,IAAMO,GAAX,IAAkBnH,OAAlB,EAA2B;UACpBA,OAAe,CAACmH,GAAD,CAApB,EAA2B;;;;YAIrB,IAAIP,KAAJ,cAAqBO,GAArB,iDAAN;;;;;EA1D+CC,eAAS,CAACC;;ACJ/DC,MAAM,CAACC,OAAP,GAAiBjB,uBAAjB"}