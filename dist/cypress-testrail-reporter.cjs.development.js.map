{"version":3,"file":"cypress-testrail-reporter.cjs.development.js","sources":["../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/testrail.interface.ts","../src/testrail.ts","../src/utils.ts","../src/reporter.ts"],"sourcesContent":["// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","export interface TestRailOptions {\n  domain: string;\n  username: string;\n  password: string;\n  projectId: number;\n  planId: number;\n}\n\nexport enum Status {\n  Passed = 1,\n  Blocked = 2,\n  Untested = 3,\n  Retest = 4,\n  Failed = 5,\n}\n\nexport interface TestRailResult {\n  case_id: number;\n  run_id: number;\n  status_id: Status;\n  comment?: String;\n}\n","import axios, { AxiosInstance } from 'axios';\nimport chalk from 'chalk';\nimport { format } from 'date-fns';\nimport { Case, Entry, Plan, Suite } from './api.types';\nimport { Status, TestRailOptions, TestRailResult } from './testrail.interface';\n\ninterface ConstructedTestResult {\n  [runId: number]: Array<Omit<TestRailResult, 'run_id'>>;\n}\n\nclass ReporterSuite {\n  id: number;\n  name: string;\n  description: string;\n  caseIds: number[];\n  runId: number | null;\n\n  constructor(id: number, name: string, description: string) {\n    this.id = id;\n    this.name = name;\n    this.description = description;\n    this.caseIds = [];\n    this.runId = null;\n  }\n}\n\nexport class TestRail {\n  private axiosInstance: AxiosInstance;\n  private readonly projectId: number;\n  private readonly planId: number;\n  private readonly today: string;\n  private suites: ReporterSuite[] = [];\n  private testResults: TestRailResult[] = [];\n\n  constructor(private options: TestRailOptions) {\n    this.axiosInstance = axios.create({\n      baseURL: `https://${options.domain}/index.php?/api/v2`,\n      headers: { 'Content-Type': 'application/json' },\n      auth: {\n        username: options.username,\n        password: options.password,\n      },\n    });\n\n    this.projectId = options.projectId;\n    this.planId = options.planId;\n    this.today = format(new Date().getTime(), 'yyyy/MM/dd');\n  }\n\n  public get results(): TestRailResult[] {\n    return this.testResults;\n  }\n\n  public addFailedTest(caseId: number, test: Mocha.Test) {\n    const runId = this.findRunIdForCase(caseId);\n    if (runId) {\n      this.testResults.push({\n        case_id: caseId,\n        status_id: Status.Failed,\n        run_id: runId,\n        comment: (test.err as Error).message,\n      });\n    }\n  }\n\n  public addPassedTest(caseId: number, test: Mocha.Test) {\n    const runId = this.findRunIdForCase(caseId);\n    if (runId) {\n      this.testResults.push({\n        case_id: caseId,\n        status_id: Status.Passed,\n        run_id: runId,\n        comment: `Execution time: ${test.duration}ms`,\n      });\n    }\n  }\n\n  public async constructSuites(): Promise<void> {\n    try {\n      const suiteResponse = await this.axiosInstance.get<Suite[]>(`/get_suites/${this.projectId}`);\n      const suites = suiteResponse.data\n        .filter(s => !s.name.includes('Master'))\n        .sort((a, b) => {\n          if (a.name > b.name) return 1;\n          if (a.name < b.name) return -1;\n          return 0;\n        });\n\n      for (const s of suites) {\n        this.suites.push(new ReporterSuite(s.id, s.name, s.description));\n      }\n\n      const planResponse = await this.axiosInstance.get<Plan>(`/get_plan/${this.planId}`);\n      const plan = planResponse.data;\n\n      let runs: Plan[] = [];\n      if (plan.entries && plan.entries.length) {\n        runs = TestRail.flat(plan.entries.map(e => e.runs));\n      } else {\n        const response = (await this.createRuns()) as Plan[][];\n        runs = TestRail.flat(response);\n      }\n\n      for (const r of runs) {\n        this.suites.forEach(s => {\n          if (s.id === r.suite_id) {\n            s.runId = r.id;\n          }\n        });\n      }\n      await this.getCases();\n    } catch (e) {\n      console.log(chalk.redBright.underline.bold('Internal error', e));\n    }\n  }\n\n  public async publish() {\n    const constructedResults = this.constructTestResult();\n    const addResultPromises = Object.entries(constructedResults).map(([runId, results]) => {\n      return this.axiosInstance.post(`/add_results_for_cases/${runId}`, { results });\n    });\n\n    await Promise.all(addResultPromises);\n    console.log('\\n', chalk.magenta.underline.bold('(TestRail Reporter)'));\n    console.log(\n      '\\n',\n      ` - Results are published to ${chalk.magenta(\n        `https://${this.options.domain}/index.php?/runs/plan/${this.planId}`,\n      )}`,\n      '\\n',\n    );\n  }\n\n  private constructTestResult(): ConstructedTestResult {\n    return this.testResults.reduce((acc: ConstructedTestResult, cur: TestRailResult) => {\n      const { run_id, ...result } = cur;\n      acc[run_id] = acc[run_id] ? [...acc[run_id], result] : [result];\n      return acc;\n    }, {});\n  }\n\n  private findRunIdForCase(caseId: number): number {\n    const suite = this.suites.find(s => s.caseIds.includes(caseId));\n    return suite ? (suite.runId as number) : 0;\n  }\n\n  private async createRuns() {\n    const createRunPromises = this.suites.map(s => {\n      return this.axiosInstance.post<Entry>(`/add_plan_entry/${this.planId}`, {\n        suite_id: s.id,\n        name: s.name,\n        description: s.description + ' ' + this.today,\n      });\n    });\n\n    return Promise.all(createRunPromises).then(r => r.map(s => s.data.runs));\n  }\n\n  private async getCases() {\n    const getCasesPromises = this.suites.map(s => {\n      return this.axiosInstance.get<Case[]>(`/get_cases/${this.projectId}&suite_id=${s.id}`);\n    });\n\n    const casesResponse = await Promise.all(getCasesPromises);\n    const cases = TestRail.flat(casesResponse.map(cr => cr.data));\n\n    for (const c of cases) {\n      this.suites.forEach(s => {\n        if (s.id === c.suite_id) {\n          s.caseIds.push(c.id);\n        }\n      });\n    }\n  }\n\n  private static flat<T>(arr: T[][]): T[] {\n    return arr.reduce((acc, cur) => acc.concat(cur), []);\n  }\n}\n","export const titleToCaseId: (title: string) => number | null = title => {\n  const testCaseIdRegExp: RegExp = /\\bT?C(\\d+)\\b/g;\n  let m: RegExpExecArray | null;\n  let caseId: number | null = null;\n  while ((m = testCaseIdRegExp.exec(title)) !== null) {\n    caseId = parseInt(m[1]);\n  }\n  return caseId;\n};\n","import chalk from 'chalk';\nimport { reporters } from 'mocha';\nimport { TestRail } from './testrail';\nimport { TestRailOptions } from './testrail.interface';\nimport { titleToCaseId } from './utils';\n\nclass CypressTestrailReporter extends reporters.Base {\n  private readonly testRail: TestRail;\n\n  constructor(runner: Mocha.Runner, options: Mocha.MochaOptions) {\n    super(runner, options);\n    const reporterOptions = options.reporterOptions as TestRailOptions;\n    CypressTestrailReporter.validate(reporterOptions);\n    this.testRail = new TestRail(reporterOptions);\n    this.report();\n  }\n\n  private report() {\n    this.runner.once('start', this.testRail.constructSuites.bind(this.testRail));\n    this.runner.on('fail', this.handleTest('fail'));\n    this.runner.on('pass', this.handleTest('pass'));\n    this.runner.on('end', this.handleEnd);\n  }\n\n  private handleTest = (status: 'fail' | 'pass') => (test: Mocha.Test) => {\n    const caseId = titleToCaseId(test.title);\n    if (caseId) {\n      status === 'fail' ? this.testRail.addFailedTest(caseId, test) : this.testRail.addPassedTest(caseId, test);\n    }\n  };\n\n  private handleEnd = () => {\n    if (!this.testRail.results.length) {\n      console.log('\\n', chalk.magenta.underline.bold('(TestRail Reporter)'));\n      console.warn(\n        '\\n',\n        'No testcases were matched. Ensure that your tests are declared correctly and matches Cxxx',\n        '\\n',\n      );\n      return;\n    }\n\n    this.testRail.publish().catch(console.error);\n  };\n\n  private static validate(options: TestRailOptions) {\n    if (options == null) {\n      throw new Error('No reporterOptions');\n    }\n\n    for (const key in options) {\n      if ((options as any)[key]) {\n        continue;\n      }\n\n      throw new Error(`Missing ${key} value. Update repoterOptions`);\n    }\n  }\n}\n\nmodule.exports = CypressTestrailReporter;\n"],"names":["Status","ReporterSuite","id","name","description","caseIds","runId","TestRail","options","axiosInstance","axios","create","baseURL","domain","headers","auth","username","password","projectId","planId","today","format","Date","getTime","addFailedTest","caseId","test","findRunIdForCase","testResults","push","case_id","status_id","Failed","run_id","comment","err","message","addPassedTest","Passed","duration","constructSuites","get","suiteResponse","suites","data","filter","s","includes","sort","a","b","planResponse","r","forEach","suite_id","runs","getCases","plan","entries","length","flat","map","e","createRuns","response","console","log","chalk","redBright","underline","bold","publish","constructedResults","constructTestResult","addResultPromises","Object","results","post","Promise","all","magenta","reduce","acc","cur","result","suite","find","createRunPromises","then","getCasesPromises","casesResponse","cases","cr","c","arr","concat","titleToCaseId","title","testCaseIdRegExp","m","exec","parseInt","CypressTestrailReporter","runner","status","testRail","warn","error","reporterOptions","validate","report","once","bind","on","handleTest","handleEnd","Error","key","reporters","Base","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA,AAkKA;AACA,AAAO,MAAM,eAAe,iBAAiB,OAAO,MAAM,KAAK,WAAW,IAAI,MAAM,CAAC,QAAQ,KAAK,MAAM,CAAC,QAAQ,GAAG,MAAM,CAAC,iBAAiB,CAAC,CAAC,IAAI,YAAY,CAAC;AAC/J,AA2DA;AACA,AAAO,MAAM,oBAAoB,iBAAiB,OAAO,MAAM,KAAK,WAAW,IAAI,MAAM,CAAC,aAAa,KAAK,MAAM,CAAC,aAAa,GAAG,MAAM,CAAC,sBAAsB,CAAC,CAAC,IAAI,iBAAiB,CAAC;AACxL,AA8UA;;AAEA,AAAO,SAAS,MAAM,CAAC,IAAI,EAAE,OAAO,EAAE;CACrC,IAAI;EACH,IAAI,MAAM,GAAG,IAAI,EAAE,CAAC;EACpB,CAAC,MAAM,CAAC,EAAE;EACV,OAAO,OAAO,CAAC,CAAC,CAAC,CAAC;EAClB;CACD,IAAI,MAAM,IAAI,MAAM,CAAC,IAAI,EAAE;EAC1B,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,OAAO,CAAC,CAAC;EACpC;CACD,OAAO,MAAM,CAAC;CACd;;ACpjBD,IAAYA,MAAZ;;AAAA,WAAYA;EACVA,4BAAA,WAAA;EACAA,6BAAA,YAAA;EACAA,8BAAA,aAAA;EACAA,4BAAA,WAAA;EACAA,4BAAA,WAAA;CALF,EAAYA,MAAM,KAANA,MAAM,KAAA,CAAlB;;ICEMC,gBAOJ,uBAAYC,EAAZ,EAAwBC,IAAxB,EAAsCC,WAAtC;OACOF,EAAL,GAAUA,EAAV;OACKC,IAAL,GAAYA,IAAZ;OACKC,WAAL,GAAmBA,WAAnB;OACKC,OAAL,GAAe,EAAf;OACKC,KAAL,GAAa,IAAb;;;AAIJ,IAAaC,QAAb;;AAAA;oBAQsBC,OAApB;gBAAoB,GAAAA,OAAA;eAHZ,GAA0B,EAA1B;oBACA,GAAgC,EAAhC;SAGDC,aAAL,GAAqBC,KAAK,CAACC,MAAN,CAAa;MAChCC,OAAO,eAAaJ,OAAO,CAACK,MAArB,uBADyB;MAEhCC,OAAO,EAAE;wBAAkB;OAFK;MAGhCC,IAAI,EAAE;QACJC,QAAQ,EAAER,OAAO,CAACQ,QADd;QAEJC,QAAQ,EAAET,OAAO,CAACS;;KALD,CAArB;SASKC,SAAL,GAAiBV,OAAO,CAACU,SAAzB;SACKC,MAAL,GAAcX,OAAO,CAACW,MAAtB;SACKC,KAAL,GAAaC,cAAM,CAAC,IAAIC,IAAJ,GAAWC,OAAX,EAAD,EAAuB,YAAvB,CAAnB;;;;;SAOKC,aA3BT,GA2BS,uBAAcC,MAAd,EAA8BC,IAA9B;QACCpB,KAAK,GAAG,KAAKqB,gBAAL,CAAsBF,MAAtB,CAAd;;QACInB,KAAJ,EAAW;WACJsB,WAAL,CAAiBC,IAAjB,CAAsB;QACpBC,OAAO,EAAEL,MADW;QAEpBM,SAAS,EAAE/B,MAAM,CAACgC,MAFE;QAGpBC,MAAM,EAAE3B,KAHY;QAIpB4B,OAAO,EAAGR,IAAI,CAACS,GAAL,CAAmBC;OAJ/B;;GA9BN;;SAuCSC,aAvCT,GAuCS,uBAAcZ,MAAd,EAA8BC,IAA9B;QACCpB,KAAK,GAAG,KAAKqB,gBAAL,CAAsBF,MAAtB,CAAd;;QACInB,KAAJ,EAAW;WACJsB,WAAL,CAAiBC,IAAjB,CAAsB;QACpBC,OAAO,EAAEL,MADW;QAEpBM,SAAS,EAAE/B,MAAM,CAACsC,MAFE;QAGpBL,MAAM,EAAE3B,KAHY;QAIpB4B,OAAO,uBAAqBR,IAAI,CAACa,QAA1B;OAJT;;GA1CN;;SAmDeC,eAnDf;;mBAqDkC;;sCAD1B;+BAC0B,OAAK/B,aAAL,CAAmBgC,GAAnB,kBAA+C,OAAKvB,SAApD,CAD1B,iBACIwB,aADJ;cAEIC,MAAM,GAAGD,aAAa,CAACE,IAAd,CACZC,MADY,CACL,UAAAC,CAAC;mBAAI,CAACA,CAAC,CAAC3C,IAAF,CAAO4C,QAAP,CAAgB,QAAhB,CAAL;WADI,EAEZC,IAFY,CAEP,UAACC,CAAD,EAAIC,CAAJ;gBACAD,CAAC,CAAC9C,IAAF,GAAS+C,CAAC,CAAC/C,IAAf,EAAqB,OAAO,CAAP;gBACjB8C,CAAC,CAAC9C,IAAF,GAAS+C,CAAC,CAAC/C,IAAf,EAAqB,OAAO,CAAC,CAAR;mBACd,CAAP;WALW,CAAf;;+BAQgBwC,MAAhB,kHAAwB;;;;;;;;;;;;gBAAbG,CAAa;;mBACjBH,MAAL,CAAYd,IAAZ,CAAiB,IAAI5B,aAAJ,CAAkB6C,CAAC,CAAC5C,EAApB,EAAwB4C,CAAC,CAAC3C,IAA1B,EAAgC2C,CAAC,CAAC1C,WAAlC,CAAjB;;;iCAGyB,OAAKK,aAAL,CAAmBgC,GAAnB,gBAA0C,OAAKtB,MAA/C,CAdzB,iBAcIgC,YAdJ;;;;;;;;;;;;oBAyBSC,CAzBT;;uBA0BKT,MAAL,CAAYU,OAAZ,CAAoB,UAAAP,CAAC;sBACfA,CAAC,CAAC5C,EAAF,KAASkD,CAAC,CAACE,QAAf,EAAyB;oBACvBR,CAAC,CAACxC,KAAF,GAAU8C,CAAC,CAAClD,EAAZ;;iBAFJ;;;oCADcqD,IAAhB,yHAAsB;;;;;;;;qCAOhB,OAAKC,QAAL,EAhCJ;;;gBAeIC,IAAI,GAAGN,YAAY,CAACP,IAA1B;gBAEIW,IAAI,GAAW,EAAnB;;;kBACIE,IAAI,CAACC,OAAL,IAAgBD,IAAI,CAACC,OAAL,CAAaC,MAlB/B;gBAmBAJ,IAAI,GAAGhD,QAAQ,CAACqD,IAAT,CAAcH,IAAI,CAACC,OAAL,CAAaG,GAAb,CAAiB,UAAAC,CAAC;yBAAIA,CAAC,CAACP,IAAN;iBAAlB,CAAd,CAAP;;uCAEwB,OAAKQ,UAAL,EArBxB,iBAqBMC,QArBN;kBAsBAT,IAAI,GAAGhD,QAAQ,CAACqD,IAAT,CAAcI,QAAd,CAAP;;;;;;;;mBAWKF,GAAG;QACVG,OAAO,CAACC,GAAR,CAAYC,KAAK,CAACC,SAAN,CAAgBC,SAAhB,CAA0BC,IAA1B,CAA+B,gBAA/B,EAAiDR,CAAjD,CAAZ;;;;KAtFN;;;;;SA0FeS,OA1Ff;;mBA2F+B;;UAArBC,kBAAkB,GAAG,OAAKC,mBAAL,EAA3B;;UACMC,iBAAiB,GAAGC,MAAM,CAACjB,OAAP,CAAec,kBAAf,EAAmCX,GAAnC,CAAuC;YAAEvD;YAAOsE;eACjE,OAAKnE,aAAL,CAAmBoE,IAAnB,6BAAkDvE,KAAlD,EAA2D;UAAEsE,OAAO,EAAPA;SAA7D,CAAP;OADwB,CAA1B;6BAIME,OAAO,CAACC,GAAR,CAAYL,iBAAZ;QACNT,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBC,KAAK,CAACa,OAAN,CAAcX,SAAd,CAAwBC,IAAxB,CAA6B,qBAA7B,CAAlB;QACAL,OAAO,CAACC,GAAR,CACE,IADF,mCAEiCC,KAAK,CAACa,OAAN,cAClB,OAAKxE,OAAL,CAAaK,MADK,8BAC0B,OAAKM,MAD/B,CAFjC,EAKE,IALF;;KAlGJ;;;;;SA2GUsD,mBA3GV,GA2GU;WACC,KAAK7C,WAAL,CAAiBqD,MAAjB,CAAwB,UAACC,GAAD,EAA6BC,GAA7B;UACrBlD,SAAsBkD,IAAtBlD;UAAWmD,uCAAWD;;MAC9BD,GAAG,CAACjD,MAAD,CAAH,GAAciD,GAAG,CAACjD,MAAD,CAAH,aAAkBiD,GAAG,CAACjD,MAAD,CAArB,GAA+BmD,MAA/B,KAAyC,CAACA,MAAD,CAAvD;aACOF,GAAP;KAHK,EAIJ,EAJI,CAAP;GA5GJ;;SAmHUvD,gBAnHV,GAmHU,0BAAiBF,MAAjB;QACA4D,KAAK,GAAG,KAAK1C,MAAL,CAAY2C,IAAZ,CAAiB,UAAAxC,CAAC;aAAIA,CAAC,CAACzC,OAAF,CAAU0C,QAAV,CAAmBtB,MAAnB,CAAJ;KAAlB,CAAd;WACO4D,KAAK,GAAIA,KAAK,CAAC/E,KAAV,GAA6B,CAAzC;GArHJ;;SAwHgByD,UAxHhB;;mBAyH8B;;UAApBwB,iBAAiB,GAAG,OAAK5C,MAAL,CAAYkB,GAAZ,CAAgB,UAAAf,CAAC;eAClC,OAAKrC,aAAL,CAAmBoE,IAAnB,sBAAkD,OAAK1D,MAAvD,EAAiE;UACtEmC,QAAQ,EAAER,CAAC,CAAC5C,EAD0D;UAEtEC,IAAI,EAAE2C,CAAC,CAAC3C,IAF8D;UAGtEC,WAAW,EAAE0C,CAAC,CAAC1C,WAAF,GAAgB,GAAhB,GAAsB,OAAKgB;SAHnC,CAAP;OADwB,CAA1B;;aAQO0D,OAAO,CAACC,GAAR,CAAYQ,iBAAZ,EAA+BC,IAA/B,CAAoC,UAAApC,CAAC;eAAIA,CAAC,CAACS,GAAF,CAAM,UAAAf,CAAC;iBAAIA,CAAC,CAACF,IAAF,CAAOW,IAAX;SAAP,CAAJ;OAArC,CAAP;KAjIJ;;;;;SAoIgBC,QApIhB;;mBAqI6B;;UAAnBiC,gBAAgB,GAAG,OAAK9C,MAAL,CAAYkB,GAAZ,CAAgB,UAAAf,CAAC;eACjC,OAAKrC,aAAL,CAAmBgC,GAAnB,iBAA6C,OAAKvB,SAAlD,kBAAwE4B,CAAC,CAAC5C,EAA1E,CAAP;OADuB,CAAzB;;6BAI4B4E,OAAO,CAACC,GAAR,CAAYU,gBAAZ,kBAAtBC;YACAC,KAAK,GAAGpF,QAAQ,CAACqD,IAAT,CAAc8B,aAAa,CAAC7B,GAAd,CAAkB,UAAA+B,EAAE;iBAAIA,EAAE,CAAChD,IAAP;SAApB,CAAd,CAAd;;;;;;;;;;;;cAEWiD;;iBACJlD,MAAL,CAAYU,OAAZ,CAAoB,UAAAP,CAAC;gBACfA,CAAC,CAAC5C,EAAF,KAAS2F,CAAC,CAACvC,QAAf,EAAyB;cACvBR,CAAC,CAACzC,OAAF,CAAUwB,IAAV,CAAegE,CAAC,CAAC3F,EAAjB;;WAFJ;;;8BADcyF,KAAhB,yHAAuB;;;;;;;;KA5I3B;;;;;WAqJiB/B,IArJjB,GAqJU,cAAekC,GAAf;WACCA,GAAG,CAACb,MAAJ,CAAW,UAACC,GAAD,EAAMC,GAAN;aAAcD,GAAG,CAACa,MAAJ,CAAWZ,GAAX,CAAd;KAAX,EAA0C,EAA1C,CAAP;GAtJJ;;;;;aAwBW,KAAKvD,WAAZ;;;;;;;AClDG,IAAMoE,aAAa,GAAqC,SAAlDA,aAAkD,CAAAC,KAAK;MAC5DC,gBAAgB,GAAW,eAAjC;MACIC,CAAJ;MACI1E,MAAM,GAAkB,IAA5B;;SACO,CAAC0E,CAAC,GAAGD,gBAAgB,CAACE,IAAjB,CAAsBH,KAAtB,CAAL,MAAuC,IAA9C,EAAoD;IAClDxE,MAAM,GAAG4E,QAAQ,CAACF,CAAC,CAAC,CAAD,CAAF,CAAjB;;;SAEK1E,MAAP;CAPK;;ICMD6E;;;;;mCAGQC,MAAZ,EAAkC/F,OAAlC;;;uCACQ+F,MAAN,EAAc/F,OAAd;;oBAcM,GAAa,UAACgG,MAAD;aAA6B,UAAC9E,IAAD;YAC1CD,MAAM,GAAGuE,aAAa,CAACtE,IAAI,CAACuE,KAAN,CAA5B;;YACIxE,MAAJ,EAAY;UACV+E,MAAM,KAAK,MAAX,GAAoB,MAAKC,QAAL,CAAcjF,aAAd,CAA4BC,MAA5B,EAAoCC,IAApC,CAApB,GAAgE,MAAK+E,QAAL,CAAcpE,aAAd,CAA4BZ,MAA5B,EAAoCC,IAApC,CAAhE;;OAHiB;KAAb;;mBAOA,GAAY;UACd,CAAC,MAAK+E,QAAL,CAAc7B,OAAd,CAAsBjB,MAA3B,EAAmC;QACjCM,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBC,KAAK,CAACa,OAAN,CAAcX,SAAd,CAAwBC,IAAxB,CAA6B,qBAA7B,CAAlB;QACAL,OAAO,CAACyC,IAAR,CACE,IADF,EAEE,2FAFF,EAGE,IAHF;;;;YAQGD,QAAL,CAAclC,OAAd,YAA8BN,OAAO,CAAC0C,KAAtC;KAXM;;QApBAC,eAAe,GAAGpG,OAAO,CAACoG,eAAhC;IACAN,uBAAuB,CAACO,QAAxB,CAAiCD,eAAjC;UACKH,QAAL,GAAgB,IAAIlG,QAAJ,CAAaqG,eAAb,CAAhB;;UACKE,MAAL;;;;;;;SAGMA,SAAA;SACDP,MAAL,CAAYQ,IAAZ,CAAiB,OAAjB,EAA0B,KAAKN,QAAL,CAAcjE,eAAd,CAA8BwE,IAA9B,CAAmC,KAAKP,QAAxC,CAA1B;SACKF,MAAL,CAAYU,EAAZ,CAAe,MAAf,EAAuB,KAAKC,UAAL,CAAgB,MAAhB,CAAvB;SACKX,MAAL,CAAYU,EAAZ,CAAe,MAAf,EAAuB,KAAKC,UAAL,CAAgB,MAAhB,CAAvB;SACKX,MAAL,CAAYU,EAAZ,CAAe,KAAf,EAAsB,KAAKE,SAA3B;;;0BAwBaN,WAAP,kBAAgBrG,OAAhB;QACFA,OAAO,IAAI,IAAf,EAAqB;YACb,IAAI4G,KAAJ,CAAU,oBAAV,CAAN;;;SAGG,IAAMC,GAAX,IAAkB7G,OAAlB,EAA2B;UACpBA,OAAe,CAAC6G,GAAD,CAApB,EAA2B;;;;YAIrB,IAAID,KAAJ,cAAqBC,GAArB,mCAAN;;;;;EAjDgCC,eAAS,CAACC;;AAsDhDC,MAAM,CAACC,OAAP,GAAiBnB,uBAAjB"}